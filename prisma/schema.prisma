// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

enum UserType {
    ROOT
    USER
    CUSTOMER
}

enum Status {
    ACTIVE
    INACTIVE
    DELETED
}

model UserModel {
    id                           String    @id @db.Uuid
    name                         String    @db.VarChar(50)
    lastName                     String    @db.VarChar(50)
    email                        String    @unique @db.VarChar(100)
    password                     String
    status                       Status    @default(ACTIVE)
    avatar                       String?
    tokenSession                 String?
    emailVerified                Boolean   @default(false)
    emailVerificationToken       String?
    emailVerificationTokenExpiry DateTime? @db.Timestamp
    passwordResetToken           String?
    passwordResetTokenExpiry     DateTime? @db.Timestamp
    passwordChangedAt            DateTime? @db.Timestamp
    failedLoginAttempts          Int       @default(0)
    accountLocked                Boolean   @default(false)
    lockoutExpiry                DateTime? @db.Timestamp
    lastLoginAt                  DateTime? @db.Timestamp
    lastLoginIp                  String?   @db.VarChar(50)
    userType                     UserType  @default(USER)
    index                        BigInt    @default(autoincrement())
    createdAt                    DateTime  @default(now())
    updatedAt                    DateTime  @updatedAt

    roles RoleModel[]

    @@map("users")
}

model RoleModel {
    id          String   @id @db.Uuid
    name        String   @unique @db.VarChar(50)
    description String?
    status      Status   @default(ACTIVE)
    index       BigInt   @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    users                 UserModel[]
    roleModulePermissions RolePermissionModuleModel[]

    @@map("roles")
}

model ModuleModel {
    id          String   @id @db.Uuid
    name        String   @db.VarChar(50)
    description String?
    status      Status   @default(ACTIVE)
    index       BigInt   @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    roleModulePermissions RolePermissionModuleModel[]
    PermissionModel       PermissionModel[]

    @@map("modules")
}

model PermissionTypeModel {
    id          String   @id @db.Uuid
    name        String   @unique @db.VarChar(50)
    description String?
    status      Status   @default(ACTIVE)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    PermissionModel PermissionModel[]

    @@map("permission_types")
}

model PermissionModel {
    id               String   @id @db.Uuid
    permissionTypeId String   @db.Uuid // Relación con PermissionTypeModel
    moduleId         String   @db.Uuid // Relación con ModuleModel
    description      String?
    status           Status   @default(ACTIVE)
    index            BigInt   @default(autoincrement())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    permissionType        PermissionTypeModel         @relation(fields: [permissionTypeId], references: [id])
    module                ModuleModel                 @relation(fields: [moduleId], references: [id])
    roleModulePermissions RolePermissionModuleModel[]

    @@map("permissions")
}

model RolePermissionModuleModel {
    id           String   @id @db.Uuid
    roleId       String   @db.Uuid
    moduleId     String   @db.Uuid
    permissionId String   @db.Uuid
    status       Status   @default(ACTIVE)
    index        BigInt   @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    role       RoleModel       @relation(fields: [roleId], references: [id])
    module     ModuleModel     @relation(fields: [moduleId], references: [id])
    permission PermissionModel @relation(fields: [permissionId], references: [id])

    @@unique([roleId, moduleId, permissionId])
    @@map("role_module_permissions")
}
